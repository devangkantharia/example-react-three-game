/*
auto-generated by: https://github.com/pmndrs/gltfjsx
*/
import React, { useRef, useState, useEffect } from 'react'
import { useFrame } from 'react-three-fiber'
import { useGLTF } from '@react-three/drei/useGLTF'
import { GLTF } from 'three/examples/jsm/loaders/GLTFLoader'
import {AnimationMixer, Bone, MeshPhongMaterial, SkinnedMesh} from "three";
import {hexStringToCode} from "../../../utils/color";

const lightOrangeIndividualMaterial = new MeshPhongMaterial({
    color: hexStringToCode("#211e1b"),
    skinning: true,
});
lightOrangeIndividualMaterial.color.convertSRGBToLinear();


type GLTFResult = GLTF & {
  nodes: {
    Cube004: SkinnedMesh
    ['Cube.004_1']: SkinnedMesh
    ['Cube.004_2']: SkinnedMesh
    ['Cube.004_3']: SkinnedMesh
    ['Cube.004_4']: SkinnedMesh
    ['Cube.004_5']: SkinnedMesh
    Bone: Bone
  }
}

type ActionName = 'Idle' | 'PickUp' | 'Punch' | 'RecieveHit' | 'Run' | 'SitDown' | 'Walk'
type GLTFActions = Record<ActionName, THREE.AnimationAction>

export default function Male({moving, ...props}: JSX.IntrinsicElements['group'] & {
    moving: boolean,
}) {
  const group = useRef<THREE.Group>()
  const { nodes, animations } = useGLTF('/Male.glb') as GLTFResult

  const actions = useRef<GLTFActions>()
  const [mixer] = useState(() => new AnimationMixer(nodes['Cube.004_5']))
  useFrame((state, delta) => mixer.update(delta))
  useEffect(() => {
    actions.current = {
      Idle: mixer.clipAction(animations[0], group.current),
      PickUp: mixer.clipAction(animations[1], group.current),
      Punch: mixer.clipAction(animations[2], group.current),
      RecieveHit: mixer.clipAction(animations[3], group.current),
      Run: mixer.clipAction(animations[4], group.current),
      SitDown: mixer.clipAction(animations[5], group.current),
      Walk: mixer.clipAction(animations[6], group.current),
    }
    return () => animations.forEach((clip) => mixer.uncacheClip(clip))
  }, [])
    useEffect(() => {
        mixer.stopAllAction()
        if (moving) {
            actions.current?.Walk.play()
        } else {
            actions.current?.Idle.play()
        }
    }, [moving])
  return (
    <group ref={group} {...props} dispose={null}>
      <primitive object={nodes.Bone} />
      <skinnedMesh material={lightOrangeIndividualMaterial} geometry={nodes.Cube004.geometry} skeleton={nodes.Cube004.skeleton} castShadow receiveShadow />
      <skinnedMesh
        material={lightOrangeIndividualMaterial}
        geometry={nodes['Cube.004_1'].geometry}
        skeleton={nodes['Cube.004_1'].skeleton} castShadow receiveShadow
      />
      <skinnedMesh
        material={lightOrangeIndividualMaterial}
        geometry={nodes['Cube.004_2'].geometry}
        skeleton={nodes['Cube.004_2'].skeleton} castShadow receiveShadow
      />
      <skinnedMesh
        material={lightOrangeIndividualMaterial}
        geometry={nodes['Cube.004_3'].geometry}
        skeleton={nodes['Cube.004_3'].skeleton} castShadow receiveShadow
      />
      <skinnedMesh
        material={lightOrangeIndividualMaterial}
        geometry={nodes['Cube.004_4'].geometry}
        skeleton={nodes['Cube.004_4'].skeleton} castShadow receiveShadow
      />
      <skinnedMesh
        material={lightOrangeIndividualMaterial}
        geometry={nodes['Cube.004_5'].geometry}
        skeleton={nodes['Cube.004_5'].skeleton} castShadow receiveShadow
      />
    </group>
  )
}

useGLTF.preload('/Male.glb')
